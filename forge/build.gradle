plugins {
    // Idea plugin
    id 'idea'
    // Forge gradle plugin
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    // Mixin plugin
    id 'org.spongepowered.mixin' version "0.7.+"
}

base {
    // Archive name for the forge mod
    archivesName = 'underground-jungle-forge'
}

minecraft {
    // Minecraft version
    mappings channel: 'official', version: minecraftVersion
    // Forge run configurations
    runs {
        client {
            workingDirectory project.file('../.minecraft')
            ideaModule "${rootProject.name}.${project.name}.main"
            mods {
                "${modId}" {
                    source sourceSets.main
                }
            }
        }
    }
}

dependencies {
    // Minecraft forge dependency
    minecraft "net.minecraftforge:forge:${minecraftVersion}-${forgeVersion}"
    // Common module dependency
    implementation project(':common')
    // Phantom library dependency
    implementation fg.deobf("io.github.phantomloader:library-forge:${phantomVersion}")
    annotationProcessor fg.deobf("io.github.phantomloader:library-forge:${phantomVersion}")
    annotationProcessor "io.github.phantomloader:processor-forge:${phantomVersion}"
}

mixin {
    // Specify mixin refmap
    add sourceSets.main, "mixin.undergroundjungle.refmap.json"
    // Common module mixin file
    config modMixin
    // Forge module mixin file
    config 'mixin.undergroundjungle.forge.json'
}

tasks.withType(JavaCompile).configureEach {
    // Copy sources from the common module
    source project(':common').sourceSets.main.allSource
    // Pass options used by the annotation processor
    options.compilerArgs.add "-AforgeVersion=${forgeVersion}"
    options.compilerArgs.add "-AphantomVersion=${phantomVersion}"
    options.compilerArgs.add "-AminecraftVersion=${minecraftVersion}"
    options.compilerArgs.add "-AmodId=${modId}"
    options.compilerArgs.add "-AmodGroupId=${modGroupId}"
    options.compilerArgs.add "-AmodVersion=${modVersion}"
    options.compilerArgs.add "-AmodName=${modName}"
    options.compilerArgs.add "-AmodLicense=${modLicense}"
    options.compilerArgs.add "-AmodAuthors=${modAuthors}"
    options.compilerArgs.add "-AmodDescription=${modDescription}"
    options.compilerArgs.add "-AmodSource=${modSource}"
    options.compilerArgs.add "-AmodIssues=${modIssues}"
}

processResources {
    // Copy resources from the common module
    from project(':common').sourceSets.main.resources
}

jar {
    // Re-obfuscate the jar
    finalizedBy 'reobfJar'
}
